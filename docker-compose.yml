version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: cofriends-postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 1234
      POSTGRES_DB: cofriends
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - cofriends-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MongoDB
  mongodb:
    image: mongo:7.0
    container_name: cofriends-mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: mongo
      MONGO_INITDB_ROOT_PASSWORD: 1234
      MONGO_INITDB_DATABASE: cofriends_chat
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    networks:
      - cofriends-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis
  redis:
    image: redis:7-alpine
    container_name: cofriends-redis
    command: redis-server --requirepass 1234
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - cofriends-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # FastAPI Application
  fastapi-app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: cofriends-fastapi
    # IAM Role 사용을 위한 설정
    # network_mode: "host"  # 다른 서비스와 충돌 가능
    # privileged: true  # 보안상 권장하지 않음
    environment:
      # IAM Role을 사용하므로 AWS 자격 증명 전달 불필요
      # AWS_DEFAULT_REGION만 설정
      AWS_DEFAULT_REGION: ap-northeast-2
      SERVER_HOST: 0.0.0.0
      SERVER_PORT: 5000
      ENVIRONMENT: prod
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 1234
      POSTGRES_DB: cofriends
      MONGODB_HOST: mongodb
      MONGODB_PORT: 27017
      MONGODB_USER: mongo
      MONGODB_PASSWORD: 1234
      MONGODB_DB: cofriends_chat
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: 1234
      REDIS_DB: 0
      # Slack Configuration - will be loaded from AWS Secrets Manager in production
      SLACK_CLIENT_ID: ${SLACK_CLIENT_ID}
      SLACK_CLIENT_SECRET: ${SLACK_CLIENT_SECRET}
      SLACK_REDIRECT_URI: ${SLACK_REDIRECT_URI}
      CORS_ORIGINS: ${CORS_ORIGINS:-http://buildpechatbot.com}
      # AWS Bedrock Configuration - will be loaded from AWS Secrets Manager in production
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_REGION: ${AWS_REGION}
      BEDROCK_MODEL_ID: ${BEDROCK_MODEL_ID:-anthropic.claude-3-haiku-20240307-v1:0}
    ports:
      - "5000:5000"
    volumes:
      # 개발 환경에서 코드 변경 시 자동 반영
      - ./app:/app/app
    depends_on:
      postgres:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - cofriends-network
    restart: unless-stopped

networks:
  cofriends-network:
    driver: bridge

volumes:
  postgres_data:
  mongodb_data:
  redis_data:

